# -*- coding: utf-8 -*-
"""feynn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tqcSb25GGbFVS51sIXdcXEeCku5keiqd
"""

# Commented out IPython magic to ensure Python compatibility.
#import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv("/content/Electric_Vehicle_Population_Data.csv") #Reading the data

data.head() 
data.describe() #Descriptive Stats

data.shape   # we have 104874 rows and 14 colums

data.describe() #Descriptive Stats

data.info() #checking data types

data.isnull().sum().sort_values(ascending = False) #chceking missing values

"""###### We don't have any missing values"""

data.columns.values

data = data.drop(['DOL Vehicle ID','Base MSRP', '2020 Census Tract','Exchange rate'],axis = 1) #dropping columns which are not needed

data

#changing type 
data['City']=data['City'].astype('category')
data['Make']=data['Make'].astype('category')
data['Model']=data['Model'].astype('category')
data['Electric Vehicle Type']=data['Electric Vehicle Type'].astype('category')
data['Clean Alternative Fuel Vehicle (CAFV) Eligibility']=data['Clean Alternative Fuel Vehicle (CAFV) Eligibility'].astype('category')
data['Electric Range']=data['Electric Range'].astype('int')
data['Seats']=data['Seats'].astype('int')
data['Price(Rupee)']=data['Price(Rupee)'].astype('int')

data.info()

print(f"Unique Values from 6 Columns:\
{pd.concat([data['City'],data['Year'],data['Make'],data['Model'],data['Electric Vehicle Type'],data['Clean Alternative Fuel Vehicle (CAFV) Eligibility']]).unique()}")

data['Electric Range'].unique()

data['Seats'].unique()

data['Price(Rupee)'].unique()

data['PriceEuro'].unique()

data.loc[data['Electric Range'] == 0].value_counts()

data=data.rename(columns={"Electric Range":"ERange"}) #Renaming Column

import statistics
def newErange(ERange):
    if ERange == 0:
        return data['ERange'].mean()
    else:
        return ERange

data['ERange']=data['ERange'].apply(newErange)

data.drop(data.index[[20]])

data['ERange'].head(25)

#Dividing PriceEuro into different class
def flag_df(data):
    
    if ( data['Price(Rupee)'] < 3500000) :
        return 'Sub-Economy'
    elif (3500000<= data['Price(Rupee)'] < 5500000):
        return 'Economy'
    elif (5500000 <= data['Price(Rupee)'] < 7500000 ):
        return 'Sub-Premium'
    elif (data['Price(Rupee)'] >= 7500000):
        return 'Premium'
    
data['Class'] = data.apply(flag_df, axis = 1)

data['Class'].unique()

#data=data.dropna()

#checking outliers
ax = sns.boxplot(data['ERange'])

bx = sns.boxplot(data['Price(Rupee)'])

dx = sns.boxplot(data['Seats'])

data.describe() #Descriptive Stats

data

data=data[['City','Make','Electric Vehicle Type','Clean Alternative Fuel Vehicle (CAFV) Eligibility','Class','Seats','ERange','Price(Rupee)' ]]
data

data.info()

a=np.arange(1, 104875)
a

# sns.pairplot(data,hue='RapidCharge')

# data1=pd.get_dummies(data[['Make','Electric Vehicle Type','Clean Alternative Fuel Vehicle (CAFV) Eligibility','Class','Seats']])
# data1

# # data2=data['City']
# # data2.columns=['City']
# # data2=pd.DataFrame(data2)
# data3=data['ERange']
# data4=data['Price(Rupee)']
# data_final=pd.concat([data2,data1,data2,data4])
# data_final

sns.pairplot(data, hue='Electric Vehicle Type')

sns.pairplot(data, hue='City')

sns.pairplot(data, hue='Make')

sns.pairplot(data, hue='Clean Alternative Fuel Vehicle (CAFV) Eligibility')

sns.pairplot(data, hue='Seats')

sns.pairplot(data, hue='Class')

ax= plt.figure(figsize=(15,8))
sns.heatmap(data.corr(),linewidths=1,linecolor='white',annot=True)

y=data['Make'].value_counts()
y

ax= plt.figure(figsize=(20,5))
sns.countplot(y='Make', data=data)

ax= plt.figure(figsize=(20,5))
sns.countplot(y='City', data=data)

ax= plt.figure(figsize=(20,5))
sns.countplot(y='Electric Vehicle Type', data=data)

ax= plt.figure(figsize=(20,5))
sns.countplot(y='Seats', data=data)

ax= plt.figure(figsize=(20,5))
sns.countplot(y='Clean Alternative Fuel Vehicle (CAFV) Eligibility', data=data)

ax= plt.figure(figsize=(20,5))
sns.countplot(y='Class', data=data)

ac= plt.figure(figsize=(20,5))
sns.barplot(x='Make',y='Price(Rupee)',data=data,palette='Set2')
plt.title('Price of a Car')
plt.xlabel('Brand')
plt.grid(axis='y')
plt.ylabel('Price')
plt.xticks(rotation=45)

data['Electric Vehicle Type'].value_counts().plot.pie(figsize=(8,15),autopct='%.0f%%',explode=(.1,.1))
plt.title('Electric Vehicle Type')

data['Seats'].value_counts().plot.pie(figsize=(8,15),autopct='%.0f%%',explode=(.1,.1,.1,.1,.1))
plt.title('No of Seats')

data['Class'].value_counts().plot.pie(figsize=(8,15),autopct='%.0f%%',explode=(.1,.1,.1,.1))
plt.title('Classes')

data['Clean Alternative Fuel Vehicle (CAFV) Eligibility'].value_counts().plot.pie(figsize=(8,15),autopct='%.0f%%',explode=(.1,.1,.1))
plt.title('Clean Alternative Fuel Vehicle (CAFV) Eligibility')

data['Make'].value_counts().plot.pie(figsize=(8,15),autopct='%.0f%%',explode=(.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,))
plt.title('Model')

data['City'].value_counts().plot.pie(figsize=(8,15),autopct='%.0f%%',explode=(.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,.1,))
plt.title('Cities')

df=data.groupby(['City','Make']).size()
df=df.unstack()
plt.rcParams["figure.figsize"] = (100,20)
df.plot(kind='bar')

data_f=data[['City','Make']]
data_f

li=data_f.values.tolist()
li=sorted(li, key=lambda x:(x[0]))
li

City=pd.DataFrame(li)
City.columns=['City','Make']
City

a=City.iloc[0:9522]
a

a1=City.iloc[11305:17768]
a1

a2=City.iloc[21219:26222]
a2

a3=City.iloc[29345:37485]
a3

a4=City.iloc[46605:54688]
a4

a5=City.iloc[58186:62294]
a5

a6=City.iloc[69873:74728]
a6

a7=City.iloc[78686:90047]
a7

a8=City.iloc[90048:95090]
a8

City_final=pd.concat([a,a1,a2,a3,a4,a5,a6,a7,a8])
City_final

df=City_final.groupby(['City','Make']).size()
df=df.unstack()
plt.rcParams["figure.figsize"] = (100,20)
df.plot(kind='bar')